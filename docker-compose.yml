version: '3.8'

services:
  # Laravel Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: aplikasi-madiun-app
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_URL=https://apps.madiunkab.go.id
      - DB_HOST=mysql
      - DB_DATABASE=aplikasi_madiun
      - DB_USERNAME=madiun_user
      - DB_PASSWORD=secretPassword
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./storage:/var/www/html/storage
      - app-uploads:/var/www/html/storage/app
      - app-logs:/var/www/html/storage/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aplikasi-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.aplikasi-madiun.rule=Host(`apps.madiunkab.go.id`)"
      - "traefik.http.routers.aplikasi-madiun.tls=true"
      - "traefik.http.routers.aplikasi-madiun.tls.certresolver=letsencrypt"

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: aplikasi-madiun-mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=rootPassword
      - MYSQL_DATABASE=aplikasi_madiun
      - MYSQL_USER=madiun_user
      - MYSQL_PASSWORD=secretPassword
    volumes:
      - mysql-data:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    ports:
      - "3306:3306"
    networks:
      - aplikasi-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aplikasi-madiun-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redisPassword
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - aplikasi-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  # Queue Worker
  queue:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: aplikasi-madiun-queue
    restart: unless-stopped
    command: php artisan queue:work --sleep=3 --tries=3 --max-time=3600
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_HOST=mysql
      - DB_DATABASE=aplikasi_madiun
      - DB_USERNAME=madiun_user
      - DB_PASSWORD=secretPassword
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./storage:/var/www/html/storage
      - app-logs:/var/www/html/storage/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aplikasi-network

  # Scheduler
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: aplikasi-madiun-scheduler
    restart: unless-stopped
    command: sh -c "while [ true ]; do (php artisan schedule:run --verbose --no-interaction &); sleep 60; done"
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_HOST=mysql
      - DB_DATABASE=aplikasi_madiun
      - DB_USERNAME=madiun_user
      - DB_PASSWORD=secretPassword
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./storage:/var/www/html/storage
      - app-logs:/var/www/html/storage/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aplikasi-network

  # Nginx Reverse Proxy (Optional - untuk load balancing)
  nginx:
    image: nginx:alpine
    container_name: aplikasi-madiun-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./docker/nginx/nginx-proxy.conf:/etc/nginx/nginx.conf
    depends_on:
      - app
    networks:
      - aplikasi-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: aplikasi-madiun-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - aplikasi-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: aplikasi-madiun-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - aplikasi-network

volumes:
  mysql-data:
    driver: local
  redis-data:
    driver: local
  app-uploads:
    driver: local
  app-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  aplikasi-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
